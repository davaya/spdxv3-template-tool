package: "http://spdx.org/spdx/v3/document"
exports: ["Element"]
title: "SPDX v3"
description: "Information Model: serialization derived from SPDXv3 logical model"
license: "CC0-1.0"

Bundle = ArrayOf(Element){1..*} set // Serialization of any group of Elements without optimization

ContextElement = Array              // Serialization of Element with context-enabled compression
  1 Element                         // element::
  2 Context                         // context::  includes any additional Elements in the same document

Element = Map
  1 id Key(IRI)
  2 type ElementType
  3 name String optional
  4 summary String optional
  5 description String optional
  6 comment String optional
  7 specVersion SemVer optional         // required, default from context or explicit
  8 created Created optional            // required, default from context or explicit
  9 profile ProfileIdentifier [0..*]    // required, default from context or explicit [1..*]
 10 dataLicense LicenseId optional      // required, default from context or explicit
 11 verifiedUsing IntegrityMethod optional    // Only valid for Artifact types - move to Artifact/verifiedUsing
 12 externalReference ExternalReference [0..*]  // How is this different from Artifact?
 13 extension Extension [0..*]          // Should be extension point "..."
 99 context Context optional            // not an Element property, an alternative serialization of ContextElement

Context = Record{1..*}
  1 specVersion SemVer optional         // default Element properties used when deserializing document
  2 created Created optional            // default
  3 profile ProfileIdentifier [0..*]    // default
  4 dataLicense LicenseId optional      // default
  5 baseIRI IRI optional                // namespace of this document
  6 prefixes MapOf(Prefix, IRI){1..*} optional  // namespaces of other documents
  7 elementValues Element [0..*]    // additional elements, related or unrelated, serialized in this document
  8 elementRefs ElementRef [0..*]   // other documents containing additional elements, related or unrelated

ElementRef = Record                     // "ExternalMap" in logical model
  1 id Link(Element)                    // referenced Element, "externalId" in logical model
  2 verifiedUsing IntegrityMethod       // Verifies document containing the referenced Element
  3 elementUrl ArtifactUri optional     // identifier of serialized document containing the referenced Element

ElementType = Choice
  1 annotation Annotation
  2 relationship Relationship
  3 identity Identity
  4 file File
  5 snippet Snippet
  6 collection Collection
  7 package Package
  8 bom BOM
  9 sbom SBOM

Identity = Record
  1 type IdentityType
  2 email String /email optional
  3 verifiedUsing IntegrityMethod optional    // Identity and Artifact entities are verified separately from Element properties

Annotation = Record
  1 type AnnotationType
  2 subject Link(Element)
  3 statement String optional

Relationship = Record
  1 type RelationshipType
  2 from Link(Element)
  3 to Link(Element) [1..*]
  4 completeness RelationshipCompleteness optional

File = Record
  1 contentType MediaType optional
  2 filePurpose SoftwarePurpose [0..*]
  3 artifactUri ArtifactUri optional
  4 originator Link(Element) [0..*]
  5 verifiedUsing IntegrityMethod optional    // verifies referenced entity

Snippet = Record
  1 location SnippetLocation
  2 snippetPurpose SoftwarePurpose [0..*]
  3 artifactUri ArtifactUri [0..*]
  4 originator Link(Element) [0..*]
  5 verifiedUsing IntegrityMethod optional    // verifies referenced entity

Collection = Record             // A group Element that has member Elements (defines parent-child relationships)
  1 elements IRI [0..*]

Package = Record
  1 elements IRI [0..*]

BOM = Record
  1 elements IRI [0..*]

SBOM = Record
  1 elements IRI [0..*]

Created = Record
  1 by Link(Element) [1..*]     // must be an Identity Element
  2 when DateTime

IdentityType = Choice
  1 person Person
  2 organization Organization
  3 tool Tool

Person = Record

Organization = Record

Tool = Record
  1 userAgent String

IntegrityMethod = Choice
  1 hashes Hashes
  2 signature PublicKeySignature    // A public key by itself is not a checksum

Hashes = Map{1..*}
  1 md5 Binary{16..16} /x optional
  2 sha1 Binary{20..20} /x optional
  3 sha256 Binary{32..32} /x optional

PublicKeySignature = Record

Extension = Record

DateTime = String  // implement Integer /datetime_ms

MediaType = String

Prefix = String{1..8}

SemVer = String

SnippetLocation = Record

IRI = String   // Element id:  local, prefix:local, or absolute-IRI

ArtifactUri = String /uri

LicenseId = Enumerated  // From license list: referenceNumber, licenseId  // name
 451 Apache-2.0 // Apache License 2.0
 457 CC0-1.0 // Creative Commons Zero v1.0 Universal

ExternalReference = Record      // How does this differ from Artifact?
  1 type ExternalReferenceType
  2 artifactUri ArtifactUri optional    // called "locator" in logical model

ExternalReferenceType = Enumerated      // Invalid without at least one defined value

ProfileIdentifier = String  // Should be Enumerated, need list.  Is this logical model "pkg"?

RelationshipCompleteness = Enumerated
  1 KNOWN
  2 INCOMPLETE
  3 UNKNOWN

SoftwarePurpose = Enumerated
  1 APPLICATION
  2 FRAMEWORK
  3 LIBRARY
  4 CONTAINER
  5 OPERATING-SYSTEM
  6 DEVICE
  7 FIRMWARE
  8 SOURCE
  9 PATCH
 10 ARCHIVE
 11 DOCUMENTATION
 12 EXECUTABLE
 13 MODULE
 14 BOM
 99 OTHER

AnnotationType = Enumerated
  1 REVIEW
  9 OTHER

RelationshipType = Enumerated
  0 NONE
  1 DESCRIBES
  2 DESCRIBED_BY
  3 CONTAINS
  4 CONTAINED_BY
  5 DEPENDS_ON
  6 DEPENENCY_OF
  7 DEPENDENCY_MANIFEST_OF
  8 BUILD_+DEPENDENCY_OF
  9 DEV_DEPENDENCY_OF
 10 OPTIONAL_DEPENDENCY_OF
 11 PROVIDED_DEPENDENCY_OF
 12 TEST_DEPENDENCY_OF
 13 RUNTIME_DEPENDENCY_OF
 14 EXAMPLE_OF
 15 GENERATES
 16 GENERATED_FROM
 17 ANCESTOR_OF
 18 DESCENDANT_OF
 19 VARIANT_OF
 20 DISTRIBUTION_ARTIFACT
 21 PATCH_FOR
 22 PATCH_APPLIED
 23 COPY_OF
 24 FILE_ADDED
 25 FILE_DELETED
 26 FILE_MODIFIED
 27 EXPANDED_FROM_ARCHIVE
 28 DYNAMIC_LINK
 29 STATIC_LINK
 30 DATA_FILE_OF
 31 TEST_CASE_OF
 32 BUILD_TOOL_OF
 33 DEF_TOOL_OF
 34 TEST_OF
 35 TEST_TOOL_OF
 36 DOCUMENTATION_OF
 37 OPTIONAL_COMPONENT_OF
 38 METAFILE_OF
 39 PACKAGE_OF
 40 AMENDS
 41 PREREQUISITE_FOR
 42 HAS_PREREQUISITE
 98 NOASSERTION     // should deprecate
 99 OTHER
